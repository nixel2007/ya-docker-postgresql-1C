#Использовать sql

Перем Соединение;
перем ЗапросНАСжатие;
Перем ТекстЗапросаСжатие;

Функция ПолучитьIDТАблицы(_имяТаблицы)

	ЗапросПоИД = Новый Запрос();
	ЗапросПоИД.УстановитьСоединение(Соединение);

	ЗапросПоИД.Текст = "SELECT CAST (c.oid as VARCHAR) as oids,
	|	n.nspname,
	|	c.relname
	|  FROM pg_catalog.pg_class c
	|	   LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	|  WHERE c.relname = '" + _имяТаблицы + "'
	|	AND pg_catalog.pg_table_is_visible(c.oid)
	|  ORDER BY 2, 3;";

	ТЗИД = ЗапросПоИД.Выполнить().Выгрузить();

	Для каждого строкаТЗ Из ТЗИД Цикл
		Возврат строкаТЗ[0];
	КонецЦикла;

КонецФункции


Функция ПолучитьКолонкиТаблицы(идТаблицы)

	ЗапросПоИД = Новый Запрос();
	ЗапросПоИД.УстановитьСоединение(Соединение);

	ЗапросПоИД.Текст = "
	|SELECT a.attname, pg_catalog.format_type(a.atttypid, a.atttypmod),
	|(
	|	SELECT substring(pg_catalog.pg_get_expr(d.adbin, d.adrelid) for 128)
	|	FROM pg_catalog.pg_attrdef d
	|	WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef
	|),
	|a.attnotnull, a.attnum,
	|(
	|	SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	|	WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation
	|) AS attcollation,
	|NULL AS indexdef,
	|NULL AS attfdwoptions,
	|CAST (a.attstorage AS VARCHAR) as storagetype,
	|CASE 
	|	WHEN a.attstattarget=-1 THEN NULL ELSE a.attstattarget END AS attstattarget, 
	|pg_catalog.col_description(a.attrelid, a.attnum)
	|FROM pg_catalog.pg_attribute a
	|WHERE a.attrelid = '" + идТаблицы + "' AND a.attnum > 0 AND NOT a.attisdropped
	|ORDER BY a.attnum;";
	
	ТЗИД = ЗапросПоИД.Выполнить().Выгрузить();

	Возврат ТЗИД;
	
КонецФункции

Процедура СжатьСтолбец(столбец, таблица)

	ТекстЗапросаСжатие = "" + ТекстЗапросаСжатие + "
		|ALTER TABLE " + таблица + " ALTER " + столбец + " SET STORAGE EXTENDED;";
		
КонецПроцедуры


Процедура ВывестиТаблицу(тзЗначений, таблица)

	Для каждого строкаТЗ Из тзЗначений Цикл
		наименование = строкаТЗ["attname"];
		типСжатия = строкаТЗ["storagetype"];
		типСтолбца = строкаТЗ["format_type"];

		СтрокаСообщения = "" + наименование + " " + строкаТЗ["storagetype"] + " " + строкаТЗ["format_type"];

		Если типСжатия = "p" И типСтолбца <> "timestamp without time zone" И типСтолбца <> "integer" И типСтолбца <> "boolean" И типСтолбца <> "bigint" Тогда
			СтрокаСообщения = СтрокаСообщения + " СЖИМАЕТСЯ";
			СжатьСтолбец(наименование, таблица);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Сообщить("Проверка статуса сжатия PG-1С и собственно попытка сжатия");


Соединение = Новый Соединение();
Соединение.ТипСУБД = Соединение.ТипыСУБД.PostgreSQL;
Соединение.Сервер = "localhost";
Соединение.ИмяПользователя = "postgres";
Соединение.ИмяБазы = ПолучитьПеременнуюСреды("DBNAME");
Соединение.Пароль = ПолучитьПеременнуюСреды("PG_PASSWORD");
Соединение.Порт = 5432;


Соединение.Открыть();

ЗапросКБазе = Новый Запрос();
ЗапросКБазе.УстановитьСоединение(Соединение);

ЗапросКБазе.Текст = "
|SELECT * FROM information_schema.tables WHERE table_schema = 'public' and table_type <> 'VIEW' ORDER BY table_name
|";

ТЗ = ЗапросКБазе.Выполнить().Выгрузить();

Для Каждого колонка из ТЗ.колонки Цикл
	//Сообщить("" + колонка.Имя);
КонецЦикла;

сч = 0;
количество = ТЗ.Количество();

Для каждого строкаТаблицы Из ТЗ Цикл

	Сообщить("Обработка " + сч + " из " + количество);
	имяТаблицы = строкаТаблицы[2];
	идТаблицы = ПолучитьIDТАблицы(имяТаблицы);
	
	Сообщить("Таблица " + имяТаблицы + " с ИД: " + идТаблицы);

	тзКолонок = ПолучитьКолонкиТаблицы(идТаблицы);
	ВывестиТаблицу(тзКолонок, имяТаблицы);

	сч = сч + 1 ;
КонецЦикла;


ЗапросНАСжатие = Новый Запрос();
ЗапросНАСжатие.УстановитьСоединение(Соединение);

ЗапросНАСжатие.Текст = ТекстЗапросаСжатие;

Старт = ТекущаяУниверсальнаяДатаВМиллисекундах();
Сообщить("СтартСжатия - " + ТекущаяДата());

ЗапросНАСжатие.Выполнить();
Конец = ТекущаяУниверсальнаяДатаВМиллисекундах();
Сообщить("ОкончаниеСжатия = " + ТекущаяДата());
Сообщить("Скорость в секундах - " + ((Конец-Старт)/1000));


ЗапросНАСжатие.Текст = "";
ЗапросНАСжатие.Выполнить();
